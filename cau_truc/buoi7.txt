#include <iostream>
#include <stack>
using namespace std;

// Buoc 1: Tao cau truc Node
struct Node
{
    int data;
    Node* pLeft;
    Node* pRight;
};

// Buoc 2: Khoi tao Node
Node* initNode(int value)
{
    Node* p = new Node();
    p->data = value;
    p->pLeft = NULL;
    p->pRight = NULL;

    return p;
}

// Buoc 3: Tao cau truc cay
struct Tree
{
    Node* pRoot;
};

//Buoc 4: Khoi tao cay
void initTree(Tree& t)
{
    t.pRoot = NULL;
}

void addNode(Tree& t, Node* p)
{
    // Buoc 1:
    if(t.pRoot == NULL)
    {
        t.pRoot = p;
        return;
    }
    // Buoc 2:
    Node* pGoto = t.pRoot;
    Node* pLoca = NULL;

    while (pGoto != NULL)
    {
        pLoca = pGoto;

        if(p->data < pGoto->data)
        {
            pGoto = pGoto->pLeft;
        }
        else if(p->data > pGoto->data)
        {
            pGoto = pGoto->pRight;
        }
        else
            return;
    }

    // Gan p vao Node thich hop pLoca
    if(p->data < pLoca->data)
    {
        pLoca->pLeft = p;
    }
    else if(p->data > pLoca->data)
    {
        pLoca->pRight = p;
    }
    
}

void inOrder(Tree t)
{
    stack<Node*> s;
    Node* p = t.pRoot;
    while(p != NULL || s.empty() == false)
    {
        while(p != NULL)
        {
            s.push(p);
            p = p->pLeft;
        }

        p = s.top();
        s.pop();
        cout << p->data << "   ";
        p = p->pRight;
    }
}

void LNR(Node* p)
{
    if(p != NULL)
    {
        LNR(p->pLeft);
        cout << p->data << "   ";
        LNR(p->pRight);
    }
}

bool tim(Tree t, int value)
{
    Node* p = t.pRoot;
    while(p != NULL)
    {
        if(value == p->data)
            return true;
        if(value < p->data)
            p = p->pLeft;
        else if(value > p->data)
            p = p->pRight;
    }
    return false;
}



int tong(Tree t)
{
    int tong = 0;
    stack<Node*> s;
    Node* p = t.pRoot;
    while(p != NULL || s.empty() == false)
    {
        while(p != NULL)
        {
            s.push(p);
            p = p->pLeft;
        }

        p = s.top();
        s.pop();
        //cout << p->data << "   ";
        tong += p->data;
        p = p->pRight;
    }
    return tong;
}

void tong(Node* p, int& t)
{
    if(p != NULL)
    {
        tong(p->pLeft, t);
        t = t + p->data;
        tong(p->pRight, t);
    }
}

Node* timNode(Tree t, int value)
{
    Node* p = t.pRoot;
    while(p != NULL)
    {
        if(value == p->data)
            return p;
        if(value < p->data)
            p = p->pLeft;
        else if(value > p->data)
            p = p->pRight;
    }
    return NULL;
}

void printfNhanh(Tree t, int value)
{
    // Buoc 1: tim dia chi node co gia tri la value
    Node* p = timNode(t, value);
    //Buoc 2L int
    LNR(p);
}

int main()
{
    Tree t;
    initTree(t);
    
    // 50 26 73 66 88 61
    Node* p1 = initNode(50);
    Node* p2 = initNode(26);
    Node* p3 = initNode(73);
    Node* p4 = initNode(66);
    Node* p5 = initNode(88);
    Node* p6 = initNode(61);

    addNode(t, p1);
    addNode(t, p2);
    addNode(t, p3);
    addNode(t, p4);
    addNode(t, p5);
    addNode(t, p6);

    addNode(t, initNode(99));
    addNode(t, initNode(10));
    // addNode(t, initNode(26));
    inOrder(t);

    cout << endl;
    LNR(t.pRoot);
    cout << endl;

    cout << "Tim 39: " << tim(t, 39) << endl;
    cout << "Tim 61: " << tim(t, 61) << endl;

    cout << "\n Ket qua tong = " << tong(t) << endl;

    int tg = 0;
    tong(t.pRoot, tg);
    cout << "\n Ket qua tong = " << tg << endl;

    printfNhanh(t, 73);

    return 0;
}
